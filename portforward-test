#!/bin/bash
#
#######################################################
#
# Name:   portforward-test
# Author: Sean Sullivan
# Date:   Jan. 16, 2024
# Description:
#   Each iteration loop issues four port-forward
#   requests.
#     1) request local_port1 (8080) index.html
#     2) request local_port2 (8000) index.html
#     3) request local_port1 (8080) basic-file.html
#     4) request local_port2 (8000) basic-large.html
#
#   The large html file is ~620KB.
#
# Prerequisites:
#   1) nginx must be running in the cluster.
#   2) A kubectl port-forward command must be issued in
#   another terminal to create the connection to the
#   nginx container before running this test.
#
#   The following listens on two local ports (8080 and 8000),
#   forwarding requests to port 80 on the nginx container.
#
#   $ kubectl port-forward nginx 8080:80 8000:80
#
# Usage:
#   # 1000 iterations (= 4000 curl requests).
#   portforward-test 1000
#
#######################################################

# Number of port-forward request loops; 100 is default.
NUM_PORT_FORWARDS=${1:-100}

LOCAL_PORT_1=8080
REMOTE_PORT_1=80

LOCAL_PORT_2=8000
REMOTE_PORT_2=80

#POST_DATA_FILE="@data/post-64kb.dat"
#POST_DATA_FILE="@data/post-1mb.dat"
POST_DATA_FILE="@data/post-5mb.dat"

DATA_DIR="./data"
NGINX_DIR="${DATA_DIR}/nginx"
GOLDEN_FILE_1="${NGINX_DIR}/html-files/index.html"
GOLDEN_FILE_2="${NGINX_DIR}/html-files/basic-file.html"
GOLDEN_FILE_3="${NGINX_DIR}/html-files/basic-large.html"

set +x
set +e

# The following command should have been run in another terminal to create
# the upgraded websocket and spdy connections.
#
# $ kubectl port-forward -v=4 nginx ${LOCAL_PORT_1}:${REMOTE_PORT_1} ${LOCAL_PORT_2}:${REMOTE_PORT_2}

temp_dir=`mktemp -d`
errors_dir=`mktemp -d`
echo "Starting port forward test: ${LOCAL_PORT_1}:${REMOTE_PORT_1} ${LOCAL_PORT_2}:${REMOTE_PORT_2}"
echo
echo "Temp Dir: $temp_dir"
echo "Errors Dir: $errors_dir"
echo

# Counters keeping track of subrequests and errors.
numRequests=0
numErrors=0
for (( i=1 ; i<=$NUM_PORT_FORWARDS ; i++ )); 
do
    # Print progress
    if [ $(expr $i % 10) -eq 0 ];
    then
	echo "$i"
    else
	echo -n "."
    fi
    output_1=${temp_dir}/$i-result-${LOCAL_PORT_1}.txt
    output_2=${temp_dir}/$i-result-${LOCAL_PORT_2}.txt
    output_3=${temp_dir}/$i-result-${LOCAL_PORT_1}-basic.txt
    output_4=${temp_dir}/$i-result-${LOCAL_PORT_2}-large.txt
    # Port forward request to local ports, redirecting output to temp files.
    curl -X POST -d ${POST_DATA_FILE} -s http://localhost:${LOCAL_PORT_1}/index.html > ${output_1}
    curl -X POST -d ${POST_DATA_FILE} -s http://localhost:${LOCAL_PORT_2}/index.html > ${output_2}
    curl -X POST -d ${POST_DATA_FILE} -s http://localhost:${LOCAL_PORT_1}/basic-file.html > ${output_3}
    curl -X POST -d ${POST_DATA_FILE} -s http://localhost:${LOCAL_PORT_2}/basic-large.html > ${output_4}

    # Validate the output files are valid.
    diff -q ${output_1} ${GOLDEN_FILE_1}
    if [ $? -ne 0 ];
    then
	mv ${output_1} ${errors_dir}
	((numErrors++))
    else
	((numRequests++))
    fi

    diff -q ${output_2} ${GOLDEN_FILE_1}
    if [ $? -ne 0 ];
    then
	mv ${output_2} ${errors_dir}
	((numErrors++))
    else
	((numRequests++))
    fi

    diff -q ${output_3} ${GOLDEN_FILE_2}
    if [ $? -ne 0 ];
    then
	mv ${output_3} ${errors_dir}
	((numErrors++))
    else
	((numRequests++))
    fi

    diff -q ${output_4} ${GOLDEN_FILE_3}
    if [ $? -ne 0 ];
    then
	mv ${output_4} ${errors_dir}
	((numErrors++))
    else
	((numRequests++))
    fi

    # Clean up
    rm -f ${output_1}
    rm -f ${output_2}
    rm -f ${output_3}
    rm -f ${output_4}
done
echo
echo "Num Requests: ${numRequests}"
echo "Num Errors: ${numErrors}"
echo
echo "Cleaning up..."
rmdir ${temp_dir}
# Remove errors directory if there are no errors.
if [ $numErrors -eq 0 ];
then
    rmdir ${errors_dir}
fi
echo
echo "Finished"
